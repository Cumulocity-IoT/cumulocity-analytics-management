/*
 * Copyright (c) 2025 Cumulocity GmbH
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @authors Christof Strack
 */
 
package apamax.analyticsbuilder.custom;

using apama.analyticsbuilder.BlockBase;
using apama.analyticsbuilder.Activation;
using com.apama.json.JSONPlugin;
using com.apama.exceptions.Exception;
using com.apama.util.AnyExtractor;




/** The parameters for the Anomaly Detection block. */
event BasicAnomalyDetection_$Parameters{

	/**
	* Alpha (smoothing factor). 
	* 
	* Exponential smoothing factor
	* Determines the weight given to the most recent observation when predicting the next value.
	*
	* This must be a number between 0 and 1.
	*/
	float alpha;


	/**
	* Std Devs (threshold). 
	* 
	* The number of standard deviations away from the forecast a value has to be to be considered an anomaly
	*
	* This must be a finite and positive number.
	*/
	float numStdDevs;


}

/** State of the block.*/
event BasicAnomalyDetection_$State{
	float lastValue; 
	float variance; 
	float mean; 
	integer n;
	boolean stateInitialized;
}

/**
* Basic Anomaly Detection
*
* The block uses a simple exponential smoothing model to forecast the next value in a time series using a basic linear extrapolation.
* It flags anomalies by computing a running estimate of the variance of the forecast errors. 
* The smoothing factor alpha and the number of standard deviations for the anomaly threshold can be configured in the block settings.
* 
* 
* @$blockCategory Calculations
*/
event BasicAnomalyDetection {

	/**
	* BlockBase object.
	*
	* This is initialized by the framework when the block is required for a model.
	*/
	BlockBase $base;
	
	/** Parameters, filled in by the framework. */
	BasicAnomalyDetection_$Parameters $parameters;

	float alpha;
	float numStdDevs;

	/** Called once at block start up. */
	action $init() {
		alpha := $parameters.alpha;
		numStdDevs := $parameters.numStdDevs;
	}

	/**
	* This action receives the input values and contains the logic of the block. 
	*
	* It takes in 1 float which represents the signal value
   	*
   	* @param $activation The current activation, contextual information required when generating a block output. Blocks should only use the
   	* <tt>Activation</tt> object passed to them from the framework, never creating their own or holding on to an <tt>Activation</tt> object.
   	* @param $input_value input signal for anomaly detection.
   	*
   	* @$inputName value Value
	*/
	action $process(Activation $activation, float $input_value, BasicAnomalyDetection_$State $blockState) {
		if (not $blockState.stateInitialized) {
			$blockState.lastValue := $input_value;
			$blockState.mean := $input_value;
			$blockState.variance := 0.0;
			$blockState.n := 1;
			$blockState.stateInitialized := true;
		} else {
			float prediction := alpha * $input_value + (1.0 - alpha) * $blockState.lastValue;
			float predictionError := $input_value - prediction;
			$blockState.variance := alpha * predictionError * predictionError + (1.0 - alpha) * $blockState.variance;
			$blockState.mean := $blockState.mean + ( $input_value - $blockState.mean)/ $blockState.n.toFloat();
			$blockState.lastValue := prediction;
			$blockState.n := $blockState.n + 1;

			// Flag the value as an anomaly if it is outside the threshold
			boolean isAnomaly := (predictionError.abs() > numStdDevs * $blockState.variance.sqrt());
			$setOutput_isAnomaly($activation, isAnomaly);
		}
	}



	/**
	* Anomaly
	*
	* true if an anomaly is detected, false if not. 
	*/
	action<Activation,boolean> $setOutput_isAnomaly;	// This is initialized by the framework. It sets the output of the block and may trigger any blocks connected to this output.
}
