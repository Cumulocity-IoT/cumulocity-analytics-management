/*
 * Copyright (c) 2025 Cumulocity GmbH
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @authors Christof Strack
 */
 
package apamax.analyticsbuilder.blocks;

using apama.analyticsbuilder.BlockBase;
using apama.analyticsbuilder.Activation;

event MathOperation_$Parameters {
	
	 /**
	 * Operation.
	 * 
	 * The mathematical operation to perform.
	 **/
	string operation;
	
	/** Addition */
	constant string operation_add := "add";
	/** Subtraction */
	constant string operation_sub := "subtraction";
	/** Multiplication */
	constant string operation_mul := "multiplication";
	/** Division */
	constant string operation_div := "division";
	/** Modulo */
	constant string operation_mod := "modulo";

	
}

/**
 * Mathematical Operation.
 *
 * Combine two inputs using a mathematical operation.
 * Supported operations are addition, subtraction, multiplication, division, and modulo. 
 *
 * @$blockCategory Calculations
 * @$derivedName $operation
 */
event MathOperation {

	BlockBase $base;
	MathOperation_$Parameters $parameters;

	/**
	 * @param $input_value1 The first input value.
	 * @param $input_value2 The second input value.
	 *
	 * @$inputName value1 Value1
	 * @$inputName value2 Value2	
	 */
	 action $process(Activation $activation, float $input_value1, float $input_value2) {
		 if($parameters.operation = MathOperation_$Parameters.operation_add) {
			 $setOutput_output($activation, $input_value1 + $input_value2);
		 } else if($parameters.operation = MathOperation_$Parameters.operation_sub) {
			 $setOutput_output($activation, $input_value1 - $input_value2);
		 } else if($parameters.operation = MathOperation_$Parameters.operation_mul) {
			 $setOutput_output($activation, $input_value1 * $input_value2);
		 } else if($parameters.operation = MathOperation_$Parameters.operation_div) {
			 if($input_value2 != 0.0) {
				 $setOutput_output($activation, $input_value1 / $input_value2);	 
			 } 
		 } else if($parameters.operation = MathOperation_$Parameters.operation_mod) {
			 if($input_value2 != 0.0) {
				 $setOutput_output($activation, $input_value1.fmod($input_value2));	 
			 } 
		 }  
    }

    /**
	 * Result.
	 *
	 * The result of the mathematical operation.
	 */
	action<Activation, float> $setOutput_output;

}